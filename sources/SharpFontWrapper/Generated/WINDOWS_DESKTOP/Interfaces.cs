// Copyright (c) 2017 SharpFontWrapper - Julien Vulliet
//
// Generated by SharpGen
//Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpFontWrapper namespace.
//     This code was generated by a tool.
//     Date : 5/30/2017 12:34:36 AM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using SharpDX;

#if WINDOWS_DESKTOP
namespace SharpFontWrapper {

// Disable warning : XML comment is not placed on a valid language element
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1ColorRGBA']/*"/>	
    /// <unmanaged>IFW1ColorRGBA</unmanaged>	
    /// <unmanaged-short>IFW1ColorRGBA</unmanaged-short>	
    [Guid("A0EA03A0-441D-49BE-9D2C-4AE27BB7A327")]
    public partial class ColorRGBA : SharpFontWrapper.FontWrapperObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpFontWrapper.ColorRGBA"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ColorRGBA(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.ColorRGBA"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpFontWrapper.ColorRGBA(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.ColorRGBA(nativePointer);
		}
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1ColorRGBA::SetColor']/*"/>	
        /// <unmanaged>SetColor</unmanaged>	
        /// <unmanaged-short>SetColor</unmanaged-short>	
        /// <unmanaged>void IFW1ColorRGBA::SetColor([In] unsigned int Color)</unmanaged>
        public int Color {
                set { SetColor(value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1ColorRGBA::GetColor32']/*"/>	
        /// <unmanaged>GetColor32</unmanaged>	
        /// <unmanaged-short>GetColor32</unmanaged-short>	
        /// <unmanaged>unsigned int IFW1ColorRGBA::GetColor32()</unmanaged>
        public int Color32 {
                get { return GetColor32(); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="colorRef">No documentation.</param>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1ColorRGBA::SetColor']/*"/>	
        /// <unmanaged>void IFW1ColorRGBA::SetColor([In] const unsigned char* pColor)</unmanaged>	
        /// <unmanaged-short>IFW1ColorRGBA::SetColor</unmanaged-short>	
        public void SetColor(byte colorRef) {
            unsafe {
                SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, &colorRef,((void**)(*(void**)_nativePointer))[4]);		
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="colorRef">No documentation.</param>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1ColorRGBA::SetColor']/*"/>	
        /// <unmanaged>void IFW1ColorRGBA::SetColor([In] const float* pColor)</unmanaged>	
        /// <unmanaged-short>IFW1ColorRGBA::SetColor</unmanaged-short>	
        public void SetColor(float colorRef) {
            unsafe {
                SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, &colorRef,((void**)(*(void**)_nativePointer))[5]);		
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="red">No documentation.</param>	
        /// <param name="green">No documentation.</param>	
        /// <param name="blue">No documentation.</param>	
        /// <param name="alpha">No documentation.</param>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1ColorRGBA::SetColor']/*"/>	
        /// <unmanaged>void IFW1ColorRGBA::SetColor([In] float Red,[In] float Green,[In] float Blue,[In] float Alpha)</unmanaged>	
        /// <unmanaged-short>IFW1ColorRGBA::SetColor</unmanaged-short>	
        public void SetColor(float red, float green, float blue, float alpha) {
            unsafe {
                SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, red, green, blue, alpha,((void**)(*(void**)_nativePointer))[6]);		
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="color">No documentation.</param>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1ColorRGBA::SetColor']/*"/>	
        /// <unmanaged>void IFW1ColorRGBA::SetColor([In] unsigned int Color)</unmanaged>	
        /// <unmanaged-short>IFW1ColorRGBA::SetColor</unmanaged-short>	
        internal void SetColor(int color) {
            unsafe {
                SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, color,((void**)(*(void**)_nativePointer))[7]);		
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1ColorRGBA::GetColor32']/*"/>	
        /// <unmanaged>unsigned int IFW1ColorRGBA::GetColor32()</unmanaged>	
        /// <unmanaged-short>IFW1ColorRGBA::GetColor32</unmanaged-short>	
        internal int GetColor32() {
            unsafe {
                int __result__;
                __result__= 
				SharpFontWrapper.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[8]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1DWriteRenderTarget']/*"/>	
    /// <unmanaged>IFW1DWriteRenderTarget</unmanaged>	
    /// <unmanaged-short>IFW1DWriteRenderTarget</unmanaged-short>	
    [Guid("A1EB4141-9A66-4097-A5B0-6FC84F8B162C")]
    public partial class DirectWriteRenderTarget : SharpFontWrapper.FontWrapperObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpFontWrapper.DirectWriteRenderTarget"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DirectWriteRenderTarget(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.DirectWriteRenderTarget"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpFontWrapper.DirectWriteRenderTarget(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.DirectWriteRenderTarget(nativePointer);
		}
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fontFaceRef">No documentation.</param>	
        /// <param name="glyphIndex">No documentation.</param>	
        /// <param name="fontSize">No documentation.</param>	
        /// <param name="renderingMode">No documentation.</param>	
        /// <param name="measuringMode">No documentation.</param>	
        /// <param name="outDataRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1DWriteRenderTarget::DrawGlyphTemp']/*"/>	
        /// <unmanaged>HRESULT IFW1DWriteRenderTarget::DrawGlyphTemp([In] IDWriteFontFace* pFontFace,[In] unsigned short GlyphIndex,[In] float FontSize,[In] DWRITE_RENDERING_MODE RenderingMode,[In] DWRITE_MEASURING_MODE MeasuringMode,[Out] FW1_GLYPHIMAGEDATA* pOutData)</unmanaged>	
        /// <unmanaged-short>IFW1DWriteRenderTarget::DrawGlyphTemp</unmanaged-short>	
        public void DrawGlyphTemp(SharpDX.DirectWrite.FontFace fontFaceRef, short glyphIndex, float fontSize, SharpDX.DirectWrite.RenderingMode renderingMode, SharpDX.Direct2D1.MeasuringMode measuringMode, out SharpFontWrapper.GlyphImageData outDataRef) {
            unsafe {
                outDataRef = new SharpFontWrapper.GlyphImageData();
                SharpDX.Result __result__;
                fixed (void* outDataRef_ = &outDataRef)
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((fontFaceRef == null)?IntPtr.Zero:fontFaceRef.NativePointer), glyphIndex, fontSize, unchecked((int)renderingMode), unchecked((int)measuringMode), outDataRef_,((void**)(*(void**)_nativePointer))[4]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory']/*"/>	
    /// <unmanaged>IFW1Factory</unmanaged>	
    /// <unmanaged-short>IFW1Factory</unmanaged-short>	
    [Guid("8004DB2B-B5F9-4420-A6A2-E17E15E4C336")]
    public partial class Factory : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpFontWrapper.Factory"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Factory(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.Factory"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpFontWrapper.Factory(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.Factory(nativePointer);
		}
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="glyphAtlasRef">No documentation.</param>	
        /// <param name="glyphProviderRef">No documentation.</param>	
        /// <param name="glyphVertexDrawerRef">No documentation.</param>	
        /// <param name="glyphRenderStatesRef">No documentation.</param>	
        /// <param name="dWriteFactoryRef">No documentation.</param>	
        /// <param name="defaultFontParamsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateFontWrapper']/*"/>	
        /// <unmanaged>HRESULT IFW1Factory::CreateFontWrapper([In] ID3D11Device* pDevice,[In] IFW1GlyphAtlas* pGlyphAtlas,[In] IFW1GlyphProvider* pGlyphProvider,[In] IFW1GlyphVertexDrawer* pGlyphVertexDrawer,[In] IFW1GlyphRenderStates* pGlyphRenderStates,[In] IDWriteFactory* pDWriteFactory,[In] const FW1_DWRITEFONTPARAMS* pDefaultFontParams,[Out] IFW1FontWrapper** ppFontWrapper)</unmanaged>	
        /// <unmanaged-short>IFW1Factory::CreateFontWrapper</unmanaged-short>	
        public SharpFontWrapper.FontWrapper CreateFontWrapper(SharpDX.Direct3D11.Device deviceRef, SharpFontWrapper.GlyphAtlas glyphAtlasRef, SharpFontWrapper.GlyphProvider glyphProviderRef, SharpFontWrapper.GlyphVertexDrawer glyphVertexDrawerRef, SharpFontWrapper.GlyphRenderStates glyphRenderStatesRef, SharpDX.DirectWrite.Factory dWriteFactoryRef, ref SharpFontWrapper.DirectWriteFontParameters defaultFontParamsRef) {
            unsafe {
                var defaultFontParamsRef_ = new SharpFontWrapper.DirectWriteFontParameters.__Native();
                defaultFontParamsRef.__MarshalTo(ref defaultFontParamsRef_);
                SharpFontWrapper.FontWrapper fontWrapperOut;
                IntPtr fontWrapperOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), (void*)((glyphAtlasRef == null)?IntPtr.Zero:glyphAtlasRef.NativePointer), (void*)((glyphProviderRef == null)?IntPtr.Zero:glyphProviderRef.NativePointer), (void*)((glyphVertexDrawerRef == null)?IntPtr.Zero:glyphVertexDrawerRef.NativePointer), (void*)((glyphRenderStatesRef == null)?IntPtr.Zero:glyphRenderStatesRef.NativePointer), (void*)((dWriteFactoryRef == null)?IntPtr.Zero:dWriteFactoryRef.NativePointer), &defaultFontParamsRef_, &fontWrapperOut_,((void**)(*(void**)_nativePointer))[3]);		
                defaultFontParamsRef.__MarshalFree(ref defaultFontParamsRef_);
                fontWrapperOut= (fontWrapperOut_ == IntPtr.Zero)?null:new SharpFontWrapper.FontWrapper(fontWrapperOut_);	
                __result__.CheckError();
                return fontWrapperOut;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="dWriteFactoryRef">No documentation.</param>	
        /// <param name="createParamsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateFontWrapper']/*"/>	
        /// <unmanaged>HRESULT IFW1Factory::CreateFontWrapper([In] ID3D11Device* pDevice,[In] IDWriteFactory* pDWriteFactory,[In] const FW1_FONTWRAPPERCREATEPARAMS* pCreateParams,[Out] IFW1FontWrapper** ppFontWrapper)</unmanaged>	
        /// <unmanaged-short>IFW1Factory::CreateFontWrapper</unmanaged-short>	
        public SharpFontWrapper.FontWrapper CreateFontWrapper(SharpDX.Direct3D11.Device deviceRef, SharpDX.DirectWrite.Factory dWriteFactoryRef, ref SharpFontWrapper.FontWrapperCreationParameters createParamsRef) {
            unsafe {
                var createParamsRef_ = new SharpFontWrapper.FontWrapperCreationParameters.__Native();
                createParamsRef.__MarshalTo(ref createParamsRef_);
                SharpFontWrapper.FontWrapper fontWrapperOut;
                IntPtr fontWrapperOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), (void*)((dWriteFactoryRef == null)?IntPtr.Zero:dWriteFactoryRef.NativePointer), &createParamsRef_, &fontWrapperOut_,((void**)(*(void**)_nativePointer))[4]);		
                createParamsRef.__MarshalFree(ref createParamsRef_);
                fontWrapperOut= (fontWrapperOut_ == IntPtr.Zero)?null:new SharpFontWrapper.FontWrapper(fontWrapperOut_);	
                __result__.CheckError();
                return fontWrapperOut;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="szFontFamilyRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateFontWrapper']/*"/>	
        /// <unmanaged>HRESULT IFW1Factory::CreateFontWrapper([In] ID3D11Device* pDevice,[In] const wchar_t* pszFontFamily,[Out] IFW1FontWrapper** ppFontWrapper)</unmanaged>	
        /// <unmanaged-short>IFW1Factory::CreateFontWrapper</unmanaged-short>	
        public SharpFontWrapper.FontWrapper CreateFontWrapper(SharpDX.Direct3D11.Device deviceRef, string szFontFamilyRef) {
            unsafe {
                SharpFontWrapper.FontWrapper fontWrapperOut;
                IntPtr fontWrapperOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (char* szFontFamilyRef_ = szFontFamilyRef)
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), (void*)szFontFamilyRef_, &fontWrapperOut_,((void**)(*(void**)_nativePointer))[5]);		
                    fontWrapperOut= (fontWrapperOut_ == IntPtr.Zero)?null:new SharpFontWrapper.FontWrapper(fontWrapperOut_);	
                    __result__.CheckError();
                    return fontWrapperOut;
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="deviceRef">No documentation.</param>	
            /// <param name="vertexBufferSize">No documentation.</param>	
            /// <param name="glyphVertexDrawerOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateGlyphVertexDrawer']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateGlyphVertexDrawer([In] ID3D11Device* pDevice,[In] unsigned int VertexBufferSize,[Out] IFW1GlyphVertexDrawer** ppGlyphVertexDrawer)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateGlyphVertexDrawer</unmanaged-short>	
            public void CreateGlyphVertexDrawer(SharpDX.Direct3D11.Device deviceRef, int vertexBufferSize, out SharpFontWrapper.GlyphVertexDrawer glyphVertexDrawerOut) {
                unsafe {
                    IntPtr glyphVertexDrawerOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), vertexBufferSize, &glyphVertexDrawerOut_,((void**)(*(void**)_nativePointer))[6]);		
                    glyphVertexDrawerOut= (glyphVertexDrawerOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphVertexDrawer(glyphVertexDrawerOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="deviceRef">No documentation.</param>	
            /// <param name="disableGeometryShader">No documentation.</param>	
            /// <param name="anisotropicFiltering">No documentation.</param>	
            /// <param name="glyphRenderStatesOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateGlyphRenderStates']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateGlyphRenderStates([In] ID3D11Device* pDevice,[In] int DisableGeometryShader,[In] int AnisotropicFiltering,[Out] IFW1GlyphRenderStates** ppGlyphRenderStates)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateGlyphRenderStates</unmanaged-short>	
            public void CreateGlyphRenderStates(SharpDX.Direct3D11.Device deviceRef, int disableGeometryShader, int anisotropicFiltering, out SharpFontWrapper.GlyphRenderStates glyphRenderStatesOut) {
                unsafe {
                    IntPtr glyphRenderStatesOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), disableGeometryShader, anisotropicFiltering, &glyphRenderStatesOut_,((void**)(*(void**)_nativePointer))[7]);		
                    glyphRenderStatesOut= (glyphRenderStatesOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphRenderStates(glyphRenderStatesOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="glyphProviderRef">No documentation.</param>	
            /// <param name="textRendererOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateTextRenderer']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateTextRenderer([In] IFW1GlyphProvider* pGlyphProvider,[Out] IFW1TextRenderer** ppTextRenderer)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateTextRenderer</unmanaged-short>	
            public void CreateTextRenderer(SharpFontWrapper.GlyphProvider glyphProviderRef, out SharpFontWrapper.TextRenderer textRendererOut) {
                unsafe {
                    IntPtr textRendererOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((glyphProviderRef == null)?IntPtr.Zero:glyphProviderRef.NativePointer), &textRendererOut_,((void**)(*(void**)_nativePointer))[8]);		
                    textRendererOut= (textRendererOut_ == IntPtr.Zero)?null:new SharpFontWrapper.TextRenderer(textRendererOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="textGeometryOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateTextGeometry']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateTextGeometry([Out] IFW1TextGeometry** ppTextGeometry)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateTextGeometry</unmanaged-short>	
            public void CreateTextGeometry(out SharpFontWrapper.TextGeometry textGeometryOut) {
                unsafe {
                    IntPtr textGeometryOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &textGeometryOut_,((void**)(*(void**)_nativePointer))[9]);		
                    textGeometryOut= (textGeometryOut_ == IntPtr.Zero)?null:new SharpFontWrapper.TextGeometry(textGeometryOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="glyphAtlasRef">No documentation.</param>	
            /// <param name="dWriteFactoryRef">No documentation.</param>	
            /// <param name="fontCollectionRef">No documentation.</param>	
            /// <param name="maxGlyphWidth">No documentation.</param>	
            /// <param name="maxGlyphHeight">No documentation.</param>	
            /// <param name="glyphProviderOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateGlyphProvider']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateGlyphProvider([In] IFW1GlyphAtlas* pGlyphAtlas,[In] IDWriteFactory* pDWriteFactory,[In] IDWriteFontCollection* pFontCollection,[In] unsigned int MaxGlyphWidth,[In] unsigned int MaxGlyphHeight,[Out] IFW1GlyphProvider** ppGlyphProvider)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateGlyphProvider</unmanaged-short>	
            public void CreateGlyphProvider(SharpFontWrapper.GlyphAtlas glyphAtlasRef, SharpDX.DirectWrite.Factory dWriteFactoryRef, SharpDX.DirectWrite.FontCollection fontCollectionRef, int maxGlyphWidth, int maxGlyphHeight, out SharpFontWrapper.GlyphProvider glyphProviderOut) {
                unsafe {
                    IntPtr glyphProviderOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((glyphAtlasRef == null)?IntPtr.Zero:glyphAtlasRef.NativePointer), (void*)((dWriteFactoryRef == null)?IntPtr.Zero:dWriteFactoryRef.NativePointer), (void*)((fontCollectionRef == null)?IntPtr.Zero:fontCollectionRef.NativePointer), maxGlyphWidth, maxGlyphHeight, &glyphProviderOut_,((void**)(*(void**)_nativePointer))[10]);		
                    glyphProviderOut= (glyphProviderOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphProvider(glyphProviderOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="dWriteFactoryRef">No documentation.</param>	
            /// <param name="renderTargetWidth">No documentation.</param>	
            /// <param name="renderTargetHeight">No documentation.</param>	
            /// <param name="renderTargetOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateDWriteRenderTarget']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateDWriteRenderTarget([In] IDWriteFactory* pDWriteFactory,[In] unsigned int RenderTargetWidth,[In] unsigned int RenderTargetHeight,[Out] IFW1DWriteRenderTarget** ppRenderTarget)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateDWriteRenderTarget</unmanaged-short>	
            public void CreateDWriteRenderTarget(SharpDX.DirectWrite.Factory dWriteFactoryRef, int renderTargetWidth, int renderTargetHeight, out SharpFontWrapper.DirectWriteRenderTarget renderTargetOut) {
                unsafe {
                    IntPtr renderTargetOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((dWriteFactoryRef == null)?IntPtr.Zero:dWriteFactoryRef.NativePointer), renderTargetWidth, renderTargetHeight, &renderTargetOut_,((void**)(*(void**)_nativePointer))[11]);		
                    renderTargetOut= (renderTargetOut_ == IntPtr.Zero)?null:new SharpFontWrapper.DirectWriteRenderTarget(renderTargetOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="deviceRef">No documentation.</param>	
            /// <param name="glyphSheetWidth">No documentation.</param>	
            /// <param name="glyphSheetHeight">No documentation.</param>	
            /// <param name="hardwareCoordBuffer">No documentation.</param>	
            /// <param name="allowOversizedGlyph">No documentation.</param>	
            /// <param name="maxGlyphCountPerSheet">No documentation.</param>	
            /// <param name="mipLevels">No documentation.</param>	
            /// <param name="maxGlyphSheetCount">No documentation.</param>	
            /// <param name="glyphAtlasOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateGlyphAtlas']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateGlyphAtlas([In] ID3D11Device* pDevice,[In] unsigned int GlyphSheetWidth,[In] unsigned int GlyphSheetHeight,[In] int HardwareCoordBuffer,[In] int AllowOversizedGlyph,[In] unsigned int MaxGlyphCountPerSheet,[In] unsigned int MipLevels,[In] unsigned int MaxGlyphSheetCount,[Out] IFW1GlyphAtlas** ppGlyphAtlas)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateGlyphAtlas</unmanaged-short>	
            public void CreateGlyphAtlas(SharpDX.Direct3D11.Device deviceRef, int glyphSheetWidth, int glyphSheetHeight, int hardwareCoordBuffer, int allowOversizedGlyph, int maxGlyphCountPerSheet, int mipLevels, int maxGlyphSheetCount, out SharpFontWrapper.GlyphAtlas glyphAtlasOut) {
                unsafe {
                    IntPtr glyphAtlasOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), glyphSheetWidth, glyphSheetHeight, hardwareCoordBuffer, allowOversizedGlyph, maxGlyphCountPerSheet, mipLevels, maxGlyphSheetCount, &glyphAtlasOut_,((void**)(*(void**)_nativePointer))[12]);		
                    glyphAtlasOut= (glyphAtlasOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphAtlas(glyphAtlasOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="deviceRef">No documentation.</param>	
            /// <param name="glyphSheetWidth">No documentation.</param>	
            /// <param name="glyphSheetHeight">No documentation.</param>	
            /// <param name="hardwareCoordBuffer">No documentation.</param>	
            /// <param name="allowOversizedGlyph">No documentation.</param>	
            /// <param name="maxGlyphCount">No documentation.</param>	
            /// <param name="mipLevels">No documentation.</param>	
            /// <param name="glyphSheetOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateGlyphSheet']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateGlyphSheet([In] ID3D11Device* pDevice,[In] unsigned int GlyphSheetWidth,[In] unsigned int GlyphSheetHeight,[In] int HardwareCoordBuffer,[In] int AllowOversizedGlyph,[In] unsigned int MaxGlyphCount,[In] unsigned int MipLevels,[Out] IFW1GlyphSheet** ppGlyphSheet)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateGlyphSheet</unmanaged-short>	
            public void CreateGlyphSheet(SharpDX.Direct3D11.Device deviceRef, int glyphSheetWidth, int glyphSheetHeight, int hardwareCoordBuffer, int allowOversizedGlyph, int maxGlyphCount, int mipLevels, out SharpFontWrapper.GlyphSheet glyphSheetOut) {
                unsafe {
                    IntPtr glyphSheetOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), glyphSheetWidth, glyphSheetHeight, hardwareCoordBuffer, allowOversizedGlyph, maxGlyphCount, mipLevels, &glyphSheetOut_,((void**)(*(void**)_nativePointer))[13]);		
                    glyphSheetOut= (glyphSheetOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphSheet(glyphSheetOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="color">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Factory::CreateColor']/*"/>	
            /// <unmanaged>HRESULT IFW1Factory::CreateColor([In] unsigned int Color,[Out] IFW1ColorRGBA** ppColor)</unmanaged>	
            /// <unmanaged-short>IFW1Factory::CreateColor</unmanaged-short>	
            internal SharpFontWrapper.ColorRGBA CreateColor(int color) {
                unsafe {
                    SharpFontWrapper.ColorRGBA colorOut;
                    IntPtr colorOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, color, &colorOut_,((void**)(*(void**)_nativePointer))[14]);		
                    colorOut= (colorOut_ == IntPtr.Zero)?null:new SharpFontWrapper.ColorRGBA(colorOut_);	
                    __result__.CheckError();
                    return colorOut;
                }
            }
        }
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper']/*"/>	
        /// <unmanaged>IFW1FontWrapper</unmanaged>	
        /// <unmanaged-short>IFW1FontWrapper</unmanaged-short>	
        [Guid("83347A5C-B0B1-460e-A35C-427E8B85F9F4")]
        public partial class FontWrapper : SharpFontWrapper.FontWrapperObject {
            /// <summary>
            /// Initializes a new instance of the <see cref="SharpFontWrapper.FontWrapper"/> class.
            /// </summary>
            /// <param name="nativePtr">The native pointer.</param>	
            public FontWrapper(IntPtr nativePtr) : base(nativePtr) {
            }
    
    		/// <summary>
    		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.FontWrapper"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
    		/// </summary>
    		/// <param name="nativePointer">The native pointer.</param>
    		/// <returns>
    		/// The result of the conversion.
    		/// </returns>
    		public static explicit operator SharpFontWrapper.FontWrapper(IntPtr nativePointer)
    		{
    			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.FontWrapper(nativePointer);
    		}
            
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetDevice']/*"/>	
            /// <unmanaged>GetDevice</unmanaged>	
            /// <unmanaged-short>GetDevice</unmanaged-short>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
            public SharpDX.Direct3D11.Device Device {
                    get { SharpDX.Direct3D11.Device __output__; GetDevice(out __output__); return __output__; }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetDWriteFactory']/*"/>	
            /// <unmanaged>GetDWriteFactory</unmanaged>	
            /// <unmanaged-short>GetDWriteFactory</unmanaged-short>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetDWriteFactory([Out] IDWriteFactory** ppDWriteFactory)</unmanaged>
            public SharpDX.DirectWrite.Factory DWriteFactory {
                    get { SharpDX.DirectWrite.Factory __output__; GetDWriteFactory(out __output__); return __output__; }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetGlyphAtlas']/*"/>	
            /// <unmanaged>GetGlyphAtlas</unmanaged>	
            /// <unmanaged-short>GetGlyphAtlas</unmanaged-short>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetGlyphAtlas([Out] IFW1GlyphAtlas** ppGlyphAtlas)</unmanaged>
            public SharpFontWrapper.GlyphAtlas GlyphAtlas {
                    get { SharpFontWrapper.GlyphAtlas __output__; GetGlyphAtlas(out __output__); return __output__; }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetGlyphProvider']/*"/>	
            /// <unmanaged>GetGlyphProvider</unmanaged>	
            /// <unmanaged-short>GetGlyphProvider</unmanaged-short>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetGlyphProvider([Out] IFW1GlyphProvider** ppGlyphProvider)</unmanaged>
            public SharpFontWrapper.GlyphProvider GlyphProvider {
                    get { SharpFontWrapper.GlyphProvider __output__; GetGlyphProvider(out __output__); return __output__; }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetRenderStates']/*"/>	
            /// <unmanaged>GetRenderStates</unmanaged>	
            /// <unmanaged-short>GetRenderStates</unmanaged-short>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetRenderStates([Out] IFW1GlyphRenderStates** ppRenderStates)</unmanaged>
            public SharpFontWrapper.GlyphRenderStates RenderStates {
                    get { SharpFontWrapper.GlyphRenderStates __output__; GetRenderStates(out __output__); return __output__; }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetVertexDrawer']/*"/>	
            /// <unmanaged>GetVertexDrawer</unmanaged>	
            /// <unmanaged-short>GetVertexDrawer</unmanaged-short>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetVertexDrawer([Out] IFW1GlyphVertexDrawer** ppVertexDrawer)</unmanaged>
            public SharpFontWrapper.GlyphVertexDrawer VertexDrawer {
                    get { SharpFontWrapper.GlyphVertexDrawer __output__; GetVertexDrawer(out __output__); return __output__; }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="deviceOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetDevice']/*"/>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::GetDevice</unmanaged-short>	
            internal void GetDevice(out SharpDX.Direct3D11.Device deviceOut) {
                unsafe {
                    IntPtr deviceOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &deviceOut_,((void**)(*(void**)_nativePointer))[4]);		
                    deviceOut= (deviceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.Device(deviceOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="dWriteFactoryOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetDWriteFactory']/*"/>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetDWriteFactory([Out] IDWriteFactory** ppDWriteFactory)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::GetDWriteFactory</unmanaged-short>	
            internal void GetDWriteFactory(out SharpDX.DirectWrite.Factory dWriteFactoryOut) {
                unsafe {
                    IntPtr dWriteFactoryOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &dWriteFactoryOut_,((void**)(*(void**)_nativePointer))[5]);		
                    dWriteFactoryOut= (dWriteFactoryOut_ == IntPtr.Zero)?null:new SharpDX.DirectWrite.Factory(dWriteFactoryOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="glyphAtlasOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetGlyphAtlas']/*"/>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetGlyphAtlas([Out] IFW1GlyphAtlas** ppGlyphAtlas)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::GetGlyphAtlas</unmanaged-short>	
            internal void GetGlyphAtlas(out SharpFontWrapper.GlyphAtlas glyphAtlasOut) {
                unsafe {
                    IntPtr glyphAtlasOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &glyphAtlasOut_,((void**)(*(void**)_nativePointer))[6]);		
                    glyphAtlasOut= (glyphAtlasOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphAtlas(glyphAtlasOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="glyphProviderOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetGlyphProvider']/*"/>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetGlyphProvider([Out] IFW1GlyphProvider** ppGlyphProvider)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::GetGlyphProvider</unmanaged-short>	
            internal void GetGlyphProvider(out SharpFontWrapper.GlyphProvider glyphProviderOut) {
                unsafe {
                    IntPtr glyphProviderOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &glyphProviderOut_,((void**)(*(void**)_nativePointer))[7]);		
                    glyphProviderOut= (glyphProviderOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphProvider(glyphProviderOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="renderStatesOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetRenderStates']/*"/>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetRenderStates([Out] IFW1GlyphRenderStates** ppRenderStates)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::GetRenderStates</unmanaged-short>	
            internal void GetRenderStates(out SharpFontWrapper.GlyphRenderStates renderStatesOut) {
                unsafe {
                    IntPtr renderStatesOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &renderStatesOut_,((void**)(*(void**)_nativePointer))[8]);		
                    renderStatesOut= (renderStatesOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphRenderStates(renderStatesOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="vertexDrawerOut">No documentation.</param>	
            /// <returns>No documentation.</returns>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::GetVertexDrawer']/*"/>	
            /// <unmanaged>HRESULT IFW1FontWrapper::GetVertexDrawer([Out] IFW1GlyphVertexDrawer** ppVertexDrawer)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::GetVertexDrawer</unmanaged-short>	
            internal void GetVertexDrawer(out SharpFontWrapper.GlyphVertexDrawer vertexDrawerOut) {
                unsafe {
                    IntPtr vertexDrawerOut_ = IntPtr.Zero;
                    SharpDX.Result __result__;
                    __result__= 
    				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &vertexDrawerOut_,((void**)(*(void**)_nativePointer))[9]);		
                    vertexDrawerOut= (vertexDrawerOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphVertexDrawer(vertexDrawerOut_);	
                    __result__.CheckError();
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="contextRef">No documentation.</param>	
            /// <param name="textLayoutRef">No documentation.</param>	
            /// <param name="originX">No documentation.</param>	
            /// <param name="originY">No documentation.</param>	
            /// <param name="color">No documentation.</param>	
            /// <param name="clipRectRef">No documentation.</param>	
            /// <param name="transformMatrixRef">No documentation.</param>	
            /// <param name="flags">No documentation.</param>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::DrawTextLayout']/*"/>	
            /// <unmanaged>void IFW1FontWrapper::DrawTextLayout([In] ID3D11DeviceContext* pContext,[In] IDWriteTextLayout* pTextLayout,[In] float OriginX,[In] float OriginY,[In] unsigned int Color,[In] const void* pClipRect,[In] const void* pTransformMatrix,[In] FW1_TEXT_FLAG Flags)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::DrawTextLayout</unmanaged-short>	
            internal void DrawTextLayout(SharpDX.Direct3D11.DeviceContext contextRef, SharpDX.DirectWrite.TextLayout textLayoutRef, float originX, float originY, int color, System.IntPtr clipRectRef, System.IntPtr transformMatrixRef, SharpFontWrapper.TextFlags flags) {
                unsafe {
                    SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)((textLayoutRef == null)?IntPtr.Zero:textLayoutRef.NativePointer), originX, originY, color, (void*)clipRectRef, (void*)transformMatrixRef, unchecked((int)flags),((void**)(*(void**)_nativePointer))[10]);		
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="contextRef">No documentation.</param>	
            /// <param name="textLayoutRef">No documentation.</param>	
            /// <param name="originX">No documentation.</param>	
            /// <param name="originY">No documentation.</param>	
            /// <param name="color">No documentation.</param>	
            /// <param name="flags">No documentation.</param>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::DrawTextLayout']/*"/>	
            /// <unmanaged>void IFW1FontWrapper::DrawTextLayout([In] ID3D11DeviceContext* pContext,[In] IDWriteTextLayout* pTextLayout,[In] float OriginX,[In] float OriginY,[In] unsigned int Color,[In] FW1_TEXT_FLAG Flags)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::DrawTextLayout</unmanaged-short>	
            internal void DrawTextLayout(SharpDX.Direct3D11.DeviceContext contextRef, SharpDX.DirectWrite.TextLayout textLayoutRef, float originX, float originY, int color, SharpFontWrapper.TextFlags flags) {
                unsafe {
                    SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)((textLayoutRef == null)?IntPtr.Zero:textLayoutRef.NativePointer), originX, originY, color, unchecked((int)flags),((void**)(*(void**)_nativePointer))[11]);		
                }
            }
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <param name="contextRef">No documentation.</param>	
            /// <param name="szStringRef">No documentation.</param>	
            /// <param name="szFontFamilyRef">No documentation.</param>	
            /// <param name="fontSize">No documentation.</param>	
            /// <param name="layoutRectRef">No documentation.</param>	
            /// <param name="color">No documentation.</param>	
            /// <param name="clipRectRef">No documentation.</param>	
            /// <param name="transformMatrixRef">No documentation.</param>	
            /// <param name="flags">No documentation.</param>	
            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::DrawString']/*"/>	
            /// <unmanaged>void IFW1FontWrapper::DrawString([In] ID3D11DeviceContext* pContext,[In] const wchar_t* pszString,[In] const wchar_t* pszFontFamily,[In] float FontSize,[In] const FW1_RECTF* pLayoutRect,[In] unsigned int Color,[In] const void* pClipRect,[In] const void* pTransformMatrix,[In] FW1_TEXT_FLAG Flags)</unmanaged>	
            /// <unmanaged-short>IFW1FontWrapper::DrawString</unmanaged-short>	
            internal void DrawString(SharpDX.Direct3D11.DeviceContext contextRef, string szStringRef, string szFontFamilyRef, float fontSize, SharpDX.Mathematics.Interop.RawRectangleF layoutRectRef, int color, System.IntPtr clipRectRef, System.IntPtr transformMatrixRef, SharpFontWrapper.TextFlags flags) {
                unsafe {
                    fixed (char* szStringRef_ = szStringRef)
                        fixed (char* szFontFamilyRef_ = szFontFamilyRef)
                            SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)szStringRef_, (void*)szFontFamilyRef_, fontSize, &layoutRectRef, color, (void*)clipRectRef, (void*)transformMatrixRef, unchecked((int)flags),((void**)(*(void**)_nativePointer))[12]);		
                        }
                    }
                    
                    /// <summary>	
                    /// No documentation.	
                    /// </summary>	
                    /// <param name="contextRef">No documentation.</param>	
                    /// <param name="szStringRef">No documentation.</param>	
                    /// <param name="szFontFamilyRef">No documentation.</param>	
                    /// <param name="fontSize">No documentation.</param>	
                    /// <param name="x">No documentation.</param>	
                    /// <param name="y">No documentation.</param>	
                    /// <param name="color">No documentation.</param>	
                    /// <param name="flags">No documentation.</param>	
                    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::DrawString']/*"/>	
                    /// <unmanaged>void IFW1FontWrapper::DrawString([In] ID3D11DeviceContext* pContext,[In] const wchar_t* pszString,[In] const wchar_t* pszFontFamily,[In] float FontSize,[In] float X,[In] float Y,[In] unsigned int Color,[In] FW1_TEXT_FLAG Flags)</unmanaged>	
                    /// <unmanaged-short>IFW1FontWrapper::DrawString</unmanaged-short>	
                    internal void DrawString(SharpDX.Direct3D11.DeviceContext contextRef, string szStringRef, string szFontFamilyRef, float fontSize, float x, float y, int color, SharpFontWrapper.TextFlags flags) {
                        unsafe {
                            fixed (char* szStringRef_ = szStringRef)
                                fixed (char* szFontFamilyRef_ = szFontFamilyRef)
                                    SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)szStringRef_, (void*)szFontFamilyRef_, fontSize, x, y, color, unchecked((int)flags),((void**)(*(void**)_nativePointer))[13]);		
                                }
                            }
                            
                            /// <summary>	
                            /// No documentation.	
                            /// </summary>	
                            /// <param name="contextRef">No documentation.</param>	
                            /// <param name="szStringRef">No documentation.</param>	
                            /// <param name="fontSize">No documentation.</param>	
                            /// <param name="x">No documentation.</param>	
                            /// <param name="y">No documentation.</param>	
                            /// <param name="color">No documentation.</param>	
                            /// <param name="flags">No documentation.</param>	
                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::DrawString']/*"/>	
                            /// <unmanaged>void IFW1FontWrapper::DrawString([In] ID3D11DeviceContext* pContext,[In] const wchar_t* pszString,[In] float FontSize,[In] float X,[In] float Y,[In] unsigned int Color,[In] FW1_TEXT_FLAG Flags)</unmanaged>	
                            /// <unmanaged-short>IFW1FontWrapper::DrawString</unmanaged-short>	
                            internal void DrawString(SharpDX.Direct3D11.DeviceContext contextRef, string szStringRef, float fontSize, float x, float y, int color, SharpFontWrapper.TextFlags flags) {
                                unsafe {
                                    fixed (char* szStringRef_ = szStringRef)
                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)szStringRef_, fontSize, x, y, color, unchecked((int)flags),((void**)(*(void**)_nativePointer))[14]);		
                                    }
                                }
                                
                                /// <summary>	
                                /// No documentation.	
                                /// </summary>	
                                /// <param name="szStringRef">No documentation.</param>	
                                /// <param name="szFontFamilyRef">No documentation.</param>	
                                /// <param name="fontSize">No documentation.</param>	
                                /// <param name="layoutRectRef">No documentation.</param>	
                                /// <param name="flags">No documentation.</param>	
                                /// <returns>No documentation.</returns>	
                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::MeasureString']/*"/>	
                                /// <unmanaged>FW1_RECTF IFW1FontWrapper::MeasureString([In] const wchar_t* pszString,[In] const wchar_t* pszFontFamily,[In] float FontSize,[In] const FW1_RECTF* pLayoutRect,[In] FW1_TEXT_FLAG Flags)</unmanaged>	
                                /// <unmanaged-short>IFW1FontWrapper::MeasureString</unmanaged-short>	
                                public SharpDX.Mathematics.Interop.RawRectangleF MeasureString(string szStringRef, string szFontFamilyRef, float fontSize, SharpDX.Mathematics.Interop.RawRectangleF layoutRectRef, SharpFontWrapper.TextFlags flags) {
                                    unsafe {
                                        SharpDX.Mathematics.Interop.RawRectangleF __result__;
                                        fixed (char* szStringRef_ = szStringRef)
                                            fixed (char* szFontFamilyRef_ = szFontFamilyRef)
                                                SharpFontWrapper.LocalInterop.CallivoidPtr(_nativePointer,(void*)&__result__, (void*)szStringRef_, (void*)szFontFamilyRef_, fontSize, &layoutRectRef, unchecked((int)flags),((void**)(*(void**)_nativePointer))[15]);		
                                                return __result__;
                                            }
                                        }
                                        
                                        /// <summary>	
                                        /// No documentation.	
                                        /// </summary>	
                                        /// <param name="contextRef">No documentation.</param>	
                                        /// <param name="szStringRef">No documentation.</param>	
                                        /// <param name="szFontFamilyRef">No documentation.</param>	
                                        /// <param name="fontSize">No documentation.</param>	
                                        /// <param name="layoutRectRef">No documentation.</param>	
                                        /// <param name="color">No documentation.</param>	
                                        /// <param name="flags">No documentation.</param>	
                                        /// <param name="textGeometryRef">No documentation.</param>	
                                        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::AnalyzeString']/*"/>	
                                        /// <unmanaged>void IFW1FontWrapper::AnalyzeString([In] ID3D11DeviceContext* pContext,[In] const wchar_t* pszString,[In] const wchar_t* pszFontFamily,[In] float FontSize,[In] const FW1_RECTF* pLayoutRect,[In] unsigned int Color,[In] unsigned int Flags,[In] IFW1TextGeometry* pTextGeometry)</unmanaged>	
                                        /// <unmanaged-short>IFW1FontWrapper::AnalyzeString</unmanaged-short>	
                                        public void AnalyzeString(SharpDX.Direct3D11.DeviceContext contextRef, string szStringRef, string szFontFamilyRef, float fontSize, SharpDX.Mathematics.Interop.RawRectangleF layoutRectRef, int color, int flags, SharpFontWrapper.TextGeometry textGeometryRef) {
                                            unsafe {
                                                fixed (char* szStringRef_ = szStringRef)
                                                    fixed (char* szFontFamilyRef_ = szFontFamilyRef)
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)szStringRef_, (void*)szFontFamilyRef_, fontSize, &layoutRectRef, color, flags, (void*)((textGeometryRef == null)?IntPtr.Zero:textGeometryRef.NativePointer),((void**)(*(void**)_nativePointer))[16]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <param name="textLayoutRef">No documentation.</param>	
                                                /// <param name="originX">No documentation.</param>	
                                                /// <param name="originY">No documentation.</param>	
                                                /// <param name="color">No documentation.</param>	
                                                /// <param name="flags">No documentation.</param>	
                                                /// <param name="textGeometryRef">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::AnalyzeTextLayout']/*"/>	
                                                /// <unmanaged>void IFW1FontWrapper::AnalyzeTextLayout([In] ID3D11DeviceContext* pContext,[In] IDWriteTextLayout* pTextLayout,[In] float OriginX,[In] float OriginY,[In] unsigned int Color,[In] unsigned int Flags,[In] IFW1TextGeometry* pTextGeometry)</unmanaged>	
                                                /// <unmanaged-short>IFW1FontWrapper::AnalyzeTextLayout</unmanaged-short>	
                                                public void AnalyzeTextLayout(SharpDX.Direct3D11.DeviceContext contextRef, SharpDX.DirectWrite.TextLayout textLayoutRef, float originX, float originY, int color, int flags, SharpFontWrapper.TextGeometry textGeometryRef) {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)((textLayoutRef == null)?IntPtr.Zero:textLayoutRef.NativePointer), originX, originY, color, flags, (void*)((textGeometryRef == null)?IntPtr.Zero:textGeometryRef.NativePointer),((void**)(*(void**)_nativePointer))[17]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <param name="geometryRef">No documentation.</param>	
                                                /// <param name="clipRectRef">No documentation.</param>	
                                                /// <param name="transformMatrixRef">No documentation.</param>	
                                                /// <param name="flags">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::DrawGeometry']/*"/>	
                                                /// <unmanaged>void IFW1FontWrapper::DrawGeometry([In] ID3D11DeviceContext* pContext,[In] IFW1TextGeometry* pGeometry,[In] const FW1_RECTF* pClipRect,[In] const float* pTransformMatrix,[In] unsigned int Flags)</unmanaged>	
                                                /// <unmanaged-short>IFW1FontWrapper::DrawGeometry</unmanaged-short>	
                                                public void DrawGeometry(SharpDX.Direct3D11.DeviceContext contextRef, SharpFontWrapper.TextGeometry geometryRef, SharpDX.Mathematics.Interop.RawRectangleF clipRectRef, float transformMatrixRef, int flags) {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)((geometryRef == null)?IntPtr.Zero:geometryRef.NativePointer), &clipRectRef, &transformMatrixRef, flags,((void**)(*(void**)_nativePointer))[18]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1FontWrapper::Flush']/*"/>	
                                                /// <unmanaged>void IFW1FontWrapper::Flush([In] ID3D11DeviceContext* pContext)</unmanaged>	
                                                /// <unmanaged-short>IFW1FontWrapper::Flush</unmanaged-short>	
                                                public void Flush(SharpDX.Direct3D11.DeviceContext contextRef) {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer),((void**)(*(void**)_nativePointer))[19]);		
                                                    }
                                                }
                                            }
                                            /// <summary>	
                                            /// No documentation.	
                                            /// </summary>	
                                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Object']/*"/>	
                                            /// <unmanaged>IFW1Object</unmanaged>	
                                            /// <unmanaged-short>IFW1Object</unmanaged-short>	
                                            [Guid("8D3C3FB1-F2CC-4331-A623-031F74C06617")]
                                            public partial class FontWrapperObject : SharpDX.ComObject {
                                                /// <summary>
                                                /// Initializes a new instance of the <see cref="SharpFontWrapper.FontWrapperObject"/> class.
                                                /// </summary>
                                                /// <param name="nativePtr">The native pointer.</param>	
                                                public FontWrapperObject(IntPtr nativePtr) : base(nativePtr) {
                                                }
                                        
                                        		/// <summary>
                                        		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.FontWrapperObject"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
                                        		/// </summary>
                                        		/// <param name="nativePointer">The native pointer.</param>
                                        		/// <returns>
                                        		/// The result of the conversion.
                                        		/// </returns>
                                        		public static explicit operator SharpFontWrapper.FontWrapperObject(IntPtr nativePointer)
                                        		{
                                        			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.FontWrapperObject(nativePointer);
                                        		}
                                                
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Object::GetFactory']/*"/>	
                                                /// <unmanaged>GetFactory</unmanaged>	
                                                /// <unmanaged-short>GetFactory</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1Object::GetFactory([Out] IFW1Factory** ppFactory)</unmanaged>
                                                public SharpFontWrapper.Factory Factory {
                                                        get { SharpFontWrapper.Factory __output__; GetFactory(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="factoryOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1Object::GetFactory']/*"/>	
                                                /// <unmanaged>HRESULT IFW1Object::GetFactory([Out] IFW1Factory** ppFactory)</unmanaged>	
                                                /// <unmanaged-short>IFW1Object::GetFactory</unmanaged-short>	
                                                internal void GetFactory(out SharpFontWrapper.Factory factoryOut) {
                                                    unsafe {
                                                        IntPtr factoryOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &factoryOut_,((void**)(*(void**)_nativePointer))[3]);		
                                                        factoryOut= (factoryOut_ == IntPtr.Zero)?null:new SharpFontWrapper.Factory(factoryOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                            }
                                            /// <summary>	
                                            /// No documentation.	
                                            /// </summary>	
                                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas']/*"/>	
                                            /// <unmanaged>IFW1GlyphAtlas</unmanaged>	
                                            /// <unmanaged-short>IFW1GlyphAtlas</unmanaged-short>	
                                            [Guid("A31EB6A2-7458-4e24-82B3-945A95623B1F")]
                                            public partial class GlyphAtlas : SharpFontWrapper.FontWrapperObject {
                                                /// <summary>
                                                /// Initializes a new instance of the <see cref="SharpFontWrapper.GlyphAtlas"/> class.
                                                /// </summary>
                                                /// <param name="nativePtr">The native pointer.</param>	
                                                public GlyphAtlas(IntPtr nativePtr) : base(nativePtr) {
                                                }
                                        
                                        		/// <summary>
                                        		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.GlyphAtlas"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
                                        		/// </summary>
                                        		/// <param name="nativePointer">The native pointer.</param>
                                        		/// <returns>
                                        		/// The result of the conversion.
                                        		/// </returns>
                                        		public static explicit operator SharpFontWrapper.GlyphAtlas(IntPtr nativePointer)
                                        		{
                                        			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.GlyphAtlas(nativePointer);
                                        		}
                                                
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::GetDevice']/*"/>	
                                                /// <unmanaged>GetDevice</unmanaged>	
                                                /// <unmanaged-short>GetDevice</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphAtlas::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
                                                public SharpDX.Direct3D11.Device Device {
                                                        get { SharpDX.Direct3D11.Device __output__; GetDevice(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::GetTotalGlyphCount']/*"/>	
                                                /// <unmanaged>GetTotalGlyphCount</unmanaged>	
                                                /// <unmanaged-short>GetTotalGlyphCount</unmanaged-short>	
                                                /// <unmanaged>unsigned int IFW1GlyphAtlas::GetTotalGlyphCount()</unmanaged>
                                                public int TotalGlyphCount {
                                                        get { return GetTotalGlyphCount(); }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::GetSheetCount']/*"/>	
                                                /// <unmanaged>GetSheetCount</unmanaged>	
                                                /// <unmanaged-short>GetSheetCount</unmanaged-short>	
                                                /// <unmanaged>unsigned int IFW1GlyphAtlas::GetSheetCount()</unmanaged>
                                                public int SheetCount {
                                                        get { return GetSheetCount(); }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="deviceOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::GetDevice']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphAtlas::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::GetDevice</unmanaged-short>	
                                                internal void GetDevice(out SharpDX.Direct3D11.Device deviceOut) {
                                                    unsafe {
                                                        IntPtr deviceOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &deviceOut_,((void**)(*(void**)_nativePointer))[4]);		
                                                        deviceOut= (deviceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.Device(deviceOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::GetTotalGlyphCount']/*"/>	
                                                /// <unmanaged>unsigned int IFW1GlyphAtlas::GetTotalGlyphCount()</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::GetTotalGlyphCount</unmanaged-short>	
                                                internal int GetTotalGlyphCount() {
                                                    unsafe {
                                                        int __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[5]);		
                                                        return __result__;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::GetSheetCount']/*"/>	
                                                /// <unmanaged>unsigned int IFW1GlyphAtlas::GetSheetCount()</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::GetSheetCount</unmanaged-short>	
                                                internal int GetSheetCount() {
                                                    unsafe {
                                                        int __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[6]);		
                                                        return __result__;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="sheetIndex">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::GetSheet']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphAtlas::GetSheet([In] unsigned int SheetIndex,[Out] IFW1GlyphSheet** ppGlyphSheet)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::GetSheet</unmanaged-short>	
                                                public SharpFontWrapper.GlyphSheet GetSheet(int sheetIndex) {
                                                    unsafe {
                                                        SharpFontWrapper.GlyphSheet glyphSheetOut;
                                                        IntPtr glyphSheetOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, sheetIndex, &glyphSheetOut_,((void**)(*(void**)_nativePointer))[7]);		
                                                        glyphSheetOut= (glyphSheetOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphSheet(glyphSheetOut_);	
                                                        __result__.CheckError();
                                                        return glyphSheetOut;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="sheetIndex">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::GetGlyphCoords']/*"/>	
                                                /// <unmanaged>const FW1_GLYPHCOORDS* IFW1GlyphAtlas::GetGlyphCoords([In] unsigned int SheetIndex)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::GetGlyphCoords</unmanaged-short>	
                                                public SharpFontWrapper.GlyphCoordinates GetGlyphCoords(int sheetIndex) {
                                                    unsafe {
                                                        SharpFontWrapper.GlyphCoordinates __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.CalliSharpFontWrapperGlyphCoordinates(_nativePointer, sheetIndex,((void**)(*(void**)_nativePointer))[8]);		
                                                        return __result__;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <param name="sheetIndex">No documentation.</param>	
                                                /// <param name="flags">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::BindSheet']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphAtlas::BindSheet([In] ID3D11DeviceContext* pContext,[In] unsigned int SheetIndex,[In] unsigned int Flags)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::BindSheet</unmanaged-short>	
                                                public void BindSheet(SharpDX.Direct3D11.DeviceContext contextRef, int sheetIndex, int flags) {
                                                    unsafe {
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), sheetIndex, flags,((void**)(*(void**)_nativePointer))[9]);		
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="glyphMetricsRef">No documentation.</param>	
                                                /// <param name="glyphDataRef">No documentation.</param>	
                                                /// <param name="rowPitch">No documentation.</param>	
                                                /// <param name="pixelStride">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::InsertGlyph']/*"/>	
                                                /// <unmanaged>unsigned int IFW1GlyphAtlas::InsertGlyph([In] const FW1_GLYPHMETRICS* pGlyphMetrics,[In] const void* pGlyphData,[In] unsigned int RowPitch,[In] unsigned int PixelStride)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::InsertGlyph</unmanaged-short>	
                                                public int InsertGlyph(SharpFontWrapper.GlyphMetrics glyphMetricsRef, System.IntPtr glyphDataRef, int rowPitch, int pixelStride) {
                                                    unsafe {
                                                        int __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &glyphMetricsRef, (void*)glyphDataRef, rowPitch, pixelStride,((void**)(*(void**)_nativePointer))[10]);		
                                                        return __result__;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="glyphSheetRef">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::InsertSheet']/*"/>	
                                                /// <unmanaged>unsigned int IFW1GlyphAtlas::InsertSheet([In] IFW1GlyphSheet* pGlyphSheet)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::InsertSheet</unmanaged-short>	
                                                public int InsertSheet(SharpFontWrapper.GlyphSheet glyphSheetRef) {
                                                    unsafe {
                                                        int __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((glyphSheetRef == null)?IntPtr.Zero:glyphSheetRef.NativePointer),((void**)(*(void**)_nativePointer))[11]);		
                                                        return __result__;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphAtlas::Flush']/*"/>	
                                                /// <unmanaged>void IFW1GlyphAtlas::Flush([In] ID3D11DeviceContext* pContext)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphAtlas::Flush</unmanaged-short>	
                                                public void Flush(SharpDX.Direct3D11.DeviceContext contextRef) {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer),((void**)(*(void**)_nativePointer))[12]);		
                                                    }
                                                }
                                            }
                                            /// <summary>	
                                            /// No documentation.	
                                            /// </summary>	
                                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider']/*"/>	
                                            /// <unmanaged>IFW1GlyphProvider</unmanaged>	
                                            /// <unmanaged-short>IFW1GlyphProvider</unmanaged-short>	
                                            [Guid("F8360043-329D-4EC9-B0F8-ACB00FA77420")]
                                            public partial class GlyphProvider : SharpFontWrapper.FontWrapperObject {
                                                /// <summary>
                                                /// Initializes a new instance of the <see cref="SharpFontWrapper.GlyphProvider"/> class.
                                                /// </summary>
                                                /// <param name="nativePtr">The native pointer.</param>	
                                                public GlyphProvider(IntPtr nativePtr) : base(nativePtr) {
                                                }
                                        
                                        		/// <summary>
                                        		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.GlyphProvider"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
                                        		/// </summary>
                                        		/// <param name="nativePointer">The native pointer.</param>
                                        		/// <returns>
                                        		/// The result of the conversion.
                                        		/// </returns>
                                        		public static explicit operator SharpFontWrapper.GlyphProvider(IntPtr nativePointer)
                                        		{
                                        			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.GlyphProvider(nativePointer);
                                        		}
                                                
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider::GetGlyphAtlas']/*"/>	
                                                /// <unmanaged>GetGlyphAtlas</unmanaged>	
                                                /// <unmanaged-short>GetGlyphAtlas</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphProvider::GetGlyphAtlas([Out] IFW1GlyphAtlas** ppGlyphAtlas)</unmanaged>
                                                public SharpFontWrapper.GlyphAtlas GlyphAtlas {
                                                        get { SharpFontWrapper.GlyphAtlas __output__; GetGlyphAtlas(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider::GetDWriteFactory']/*"/>	
                                                /// <unmanaged>GetDWriteFactory</unmanaged>	
                                                /// <unmanaged-short>GetDWriteFactory</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphProvider::GetDWriteFactory([Out] IDWriteFactory** ppDWriteFactory)</unmanaged>
                                                public SharpDX.DirectWrite.Factory DWriteFactory {
                                                        get { SharpDX.DirectWrite.Factory __output__; GetDWriteFactory(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider::GetDWriteFontCollection']/*"/>	
                                                /// <unmanaged>GetDWriteFontCollection</unmanaged>	
                                                /// <unmanaged-short>GetDWriteFontCollection</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphProvider::GetDWriteFontCollection([Out] IDWriteFontCollection** ppFontCollection)</unmanaged>
                                                public SharpDX.DirectWrite.FontCollection DWriteFontCollection {
                                                        get { SharpDX.DirectWrite.FontCollection __output__; GetDWriteFontCollection(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="glyphAtlasOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider::GetGlyphAtlas']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphProvider::GetGlyphAtlas([Out] IFW1GlyphAtlas** ppGlyphAtlas)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphProvider::GetGlyphAtlas</unmanaged-short>	
                                                internal void GetGlyphAtlas(out SharpFontWrapper.GlyphAtlas glyphAtlasOut) {
                                                    unsafe {
                                                        IntPtr glyphAtlasOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &glyphAtlasOut_,((void**)(*(void**)_nativePointer))[4]);		
                                                        glyphAtlasOut= (glyphAtlasOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphAtlas(glyphAtlasOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="dWriteFactoryOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider::GetDWriteFactory']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphProvider::GetDWriteFactory([Out] IDWriteFactory** ppDWriteFactory)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphProvider::GetDWriteFactory</unmanaged-short>	
                                                internal void GetDWriteFactory(out SharpDX.DirectWrite.Factory dWriteFactoryOut) {
                                                    unsafe {
                                                        IntPtr dWriteFactoryOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &dWriteFactoryOut_,((void**)(*(void**)_nativePointer))[5]);		
                                                        dWriteFactoryOut= (dWriteFactoryOut_ == IntPtr.Zero)?null:new SharpDX.DirectWrite.Factory(dWriteFactoryOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="fontCollectionOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider::GetDWriteFontCollection']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphProvider::GetDWriteFontCollection([Out] IDWriteFontCollection** ppFontCollection)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphProvider::GetDWriteFontCollection</unmanaged-short>	
                                                internal void GetDWriteFontCollection(out SharpDX.DirectWrite.FontCollection fontCollectionOut) {
                                                    unsafe {
                                                        IntPtr fontCollectionOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &fontCollectionOut_,((void**)(*(void**)_nativePointer))[6]);		
                                                        fontCollectionOut= (fontCollectionOut_ == IntPtr.Zero)?null:new SharpDX.DirectWrite.FontCollection(fontCollectionOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="fontFaceRef">No documentation.</param>	
                                                /// <param name="fontSize">No documentation.</param>	
                                                /// <param name="fontFlags">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider::GetGlyphMapFromFont']/*"/>	
                                                /// <unmanaged>const void* IFW1GlyphProvider::GetGlyphMapFromFont([In] IDWriteFontFace* pFontFace,[In] float FontSize,[In] unsigned int FontFlags)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphProvider::GetGlyphMapFromFont</unmanaged-short>	
                                                public System.IntPtr GetGlyphMapFromFont(SharpDX.DirectWrite.FontFace fontFaceRef, float fontSize, int fontFlags) {
                                                    unsafe {
                                                        System.IntPtr __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)((fontFaceRef == null)?IntPtr.Zero:fontFaceRef.NativePointer), fontSize, fontFlags,((void**)(*(void**)_nativePointer))[7]);		
                                                        return __result__;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="glyphMapRef">No documentation.</param>	
                                                /// <param name="glyphIndex">No documentation.</param>	
                                                /// <param name="fontFaceRef">No documentation.</param>	
                                                /// <param name="fontFlags">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphProvider::GetAtlasIdFromGlyphIndex']/*"/>	
                                                /// <unmanaged>unsigned int IFW1GlyphProvider::GetAtlasIdFromGlyphIndex([In] const void* pGlyphMap,[In] unsigned short GlyphIndex,[In] IDWriteFontFace* pFontFace,[In] unsigned int FontFlags)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphProvider::GetAtlasIdFromGlyphIndex</unmanaged-short>	
                                                public int GetAtlasIdFromGlyphIndex(System.IntPtr glyphMapRef, short glyphIndex, SharpDX.DirectWrite.FontFace fontFaceRef, int fontFlags) {
                                                    unsafe {
                                                        int __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)glyphMapRef, glyphIndex, (void*)((fontFaceRef == null)?IntPtr.Zero:fontFaceRef.NativePointer), fontFlags,((void**)(*(void**)_nativePointer))[8]);		
                                                        return __result__;
                                                    }
                                                }
                                            }
                                            /// <summary>	
                                            /// No documentation.	
                                            /// </summary>	
                                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphRenderStates']/*"/>	
                                            /// <unmanaged>IFW1GlyphRenderStates</unmanaged>	
                                            /// <unmanaged-short>IFW1GlyphRenderStates</unmanaged-short>	
                                            [Guid("906928B6-79D8-4b42-8CE4-DC7D7046F206")]
                                            public partial class GlyphRenderStates : SharpFontWrapper.FontWrapperObject {
                                                /// <summary>
                                                /// Initializes a new instance of the <see cref="SharpFontWrapper.GlyphRenderStates"/> class.
                                                /// </summary>
                                                /// <param name="nativePtr">The native pointer.</param>	
                                                public GlyphRenderStates(IntPtr nativePtr) : base(nativePtr) {
                                                }
                                        
                                        		/// <summary>
                                        		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.GlyphRenderStates"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
                                        		/// </summary>
                                        		/// <param name="nativePointer">The native pointer.</param>
                                        		/// <returns>
                                        		/// The result of the conversion.
                                        		/// </returns>
                                        		public static explicit operator SharpFontWrapper.GlyphRenderStates(IntPtr nativePointer)
                                        		{
                                        			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.GlyphRenderStates(nativePointer);
                                        		}
                                                
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphRenderStates::GetDevice']/*"/>	
                                                /// <unmanaged>GetDevice</unmanaged>	
                                                /// <unmanaged-short>GetDevice</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphRenderStates::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
                                                public SharpDX.Direct3D11.Device Device {
                                                        get { SharpDX.Direct3D11.Device __output__; GetDevice(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="deviceOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphRenderStates::GetDevice']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphRenderStates::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphRenderStates::GetDevice</unmanaged-short>	
                                                internal void GetDevice(out SharpDX.Direct3D11.Device deviceOut) {
                                                    unsafe {
                                                        IntPtr deviceOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &deviceOut_,((void**)(*(void**)_nativePointer))[4]);		
                                                        deviceOut= (deviceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.Device(deviceOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <param name="flags">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphRenderStates::SetStates']/*"/>	
                                                /// <unmanaged>void IFW1GlyphRenderStates::SetStates([In] ID3D11DeviceContext* pContext,[In] unsigned int Flags)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphRenderStates::SetStates</unmanaged-short>	
                                                public void SetStates(SharpDX.Direct3D11.DeviceContext contextRef, int flags) {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), flags,((void**)(*(void**)_nativePointer))[5]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <param name="clipRectRef">No documentation.</param>	
                                                /// <param name="transformMatrixRef">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphRenderStates::UpdateShaderConstants']/*"/>	
                                                /// <unmanaged>void IFW1GlyphRenderStates::UpdateShaderConstants([In] ID3D11DeviceContext* pContext,[In] const FW1_RECTF* pClipRect,[In] const float* pTransformMatrix)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphRenderStates::UpdateShaderConstants</unmanaged-short>	
                                                public void UpdateShaderConstants(SharpDX.Direct3D11.DeviceContext contextRef, SharpDX.Mathematics.Interop.RawRectangleF clipRectRef, float transformMatrixRef) {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), &clipRectRef, &transformMatrixRef,((void**)(*(void**)_nativePointer))[6]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphRenderStates::HasGeometryShader']/*"/>	
                                                /// <unmanaged>int IFW1GlyphRenderStates::HasGeometryShader()</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphRenderStates::HasGeometryShader</unmanaged-short>	
                                                public int HasGeometryShader() {
                                                    unsafe {
                                                        int __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[7]);		
                                                        return __result__;
                                                    }
                                                }
                                            }
                                            /// <summary>	
                                            /// No documentation.	
                                            /// </summary>	
                                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet']/*"/>	
                                            /// <unmanaged>IFW1GlyphSheet</unmanaged>	
                                            /// <unmanaged-short>IFW1GlyphSheet</unmanaged-short>	
                                            [Guid("60CAB266-C805-461d-82C0-392472EECEFA")]
                                            public partial class GlyphSheet : SharpFontWrapper.FontWrapperObject {
                                                /// <summary>
                                                /// Initializes a new instance of the <see cref="SharpFontWrapper.GlyphSheet"/> class.
                                                /// </summary>
                                                /// <param name="nativePtr">The native pointer.</param>	
                                                public GlyphSheet(IntPtr nativePtr) : base(nativePtr) {
                                                }
                                        
                                        		/// <summary>
                                        		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.GlyphSheet"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
                                        		/// </summary>
                                        		/// <param name="nativePointer">The native pointer.</param>
                                        		/// <returns>
                                        		/// The result of the conversion.
                                        		/// </returns>
                                        		public static explicit operator SharpFontWrapper.GlyphSheet(IntPtr nativePointer)
                                        		{
                                        			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.GlyphSheet(nativePointer);
                                        		}
                                                
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetDevice']/*"/>	
                                                /// <unmanaged>GetDevice</unmanaged>	
                                                /// <unmanaged-short>GetDevice</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphSheet::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
                                                public SharpDX.Direct3D11.Device Device {
                                                        get { SharpDX.Direct3D11.Device __output__; GetDevice(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetDesc']/*"/>	
                                                /// <unmanaged>GetDesc</unmanaged>	
                                                /// <unmanaged-short>GetDesc</unmanaged-short>	
                                                /// <unmanaged>void IFW1GlyphSheet::GetDesc([Out] FW1_GLYPHSHEETDESC* pDesc)</unmanaged>
                                                public SharpFontWrapper.GlyphSheetDescription Desc {
                                                        get { SharpFontWrapper.GlyphSheetDescription __output__; GetDesc(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetSheetTexture']/*"/>	
                                                /// <unmanaged>GetSheetTexture</unmanaged>	
                                                /// <unmanaged-short>GetSheetTexture</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphSheet::GetSheetTexture([Out] ID3D11ShaderResourceView** ppSheetTextureSRV)</unmanaged>
                                                public SharpDX.Direct3D11.ShaderResourceView SheetTexture {
                                                        get { SharpDX.Direct3D11.ShaderResourceView __output__; GetSheetTexture(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetCoordBuffer']/*"/>	
                                                /// <unmanaged>GetCoordBuffer</unmanaged>	
                                                /// <unmanaged-short>GetCoordBuffer</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphSheet::GetCoordBuffer([Out] ID3D11ShaderResourceView** ppCoordBufferSRV)</unmanaged>
                                                public SharpDX.Direct3D11.ShaderResourceView CoordBuffer {
                                                        get { SharpDX.Direct3D11.ShaderResourceView __output__; GetCoordBuffer(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetGlyphCoords']/*"/>	
                                                /// <unmanaged>GetGlyphCoords</unmanaged>	
                                                /// <unmanaged-short>GetGlyphCoords</unmanaged-short>	
                                                /// <unmanaged>const FW1_GLYPHCOORDS* IFW1GlyphSheet::GetGlyphCoords()</unmanaged>
                                                public SharpFontWrapper.GlyphCoordinates GlyphCoords {
                                                        get { return GetGlyphCoords(); }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="deviceOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetDevice']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphSheet::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::GetDevice</unmanaged-short>	
                                                internal void GetDevice(out SharpDX.Direct3D11.Device deviceOut) {
                                                    unsafe {
                                                        IntPtr deviceOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &deviceOut_,((void**)(*(void**)_nativePointer))[4]);		
                                                        deviceOut= (deviceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.Device(deviceOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="descRef">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetDesc']/*"/>	
                                                /// <unmanaged>void IFW1GlyphSheet::GetDesc([Out] FW1_GLYPHSHEETDESC* pDesc)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::GetDesc</unmanaged-short>	
                                                internal void GetDesc(out SharpFontWrapper.GlyphSheetDescription descRef) {
                                                    unsafe {
                                                        descRef = new SharpFontWrapper.GlyphSheetDescription();
                                                        fixed (void* descRef_ = &descRef)
                                                            SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[5]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="sheetTextureSRVOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetSheetTexture']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphSheet::GetSheetTexture([Out] ID3D11ShaderResourceView** ppSheetTextureSRV)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::GetSheetTexture</unmanaged-short>	
                                                internal void GetSheetTexture(out SharpDX.Direct3D11.ShaderResourceView sheetTextureSRVOut) {
                                                    unsafe {
                                                        IntPtr sheetTextureSRVOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &sheetTextureSRVOut_,((void**)(*(void**)_nativePointer))[6]);		
                                                        sheetTextureSRVOut= (sheetTextureSRVOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.ShaderResourceView(sheetTextureSRVOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="coordBufferSRVOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetCoordBuffer']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphSheet::GetCoordBuffer([Out] ID3D11ShaderResourceView** ppCoordBufferSRV)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::GetCoordBuffer</unmanaged-short>	
                                                internal void GetCoordBuffer(out SharpDX.Direct3D11.ShaderResourceView coordBufferSRVOut) {
                                                    unsafe {
                                                        IntPtr coordBufferSRVOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &coordBufferSRVOut_,((void**)(*(void**)_nativePointer))[7]);		
                                                        coordBufferSRVOut= (coordBufferSRVOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.ShaderResourceView(coordBufferSRVOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::GetGlyphCoords']/*"/>	
                                                /// <unmanaged>const FW1_GLYPHCOORDS* IFW1GlyphSheet::GetGlyphCoords()</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::GetGlyphCoords</unmanaged-short>	
                                                internal SharpFontWrapper.GlyphCoordinates GetGlyphCoords() {
                                                    unsafe {
                                                        SharpFontWrapper.GlyphCoordinates __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.CalliSharpFontWrapperGlyphCoordinates(_nativePointer,((void**)(*(void**)_nativePointer))[8]);		
                                                        return __result__;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <param name="flags">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::BindSheet']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphSheet::BindSheet([In] ID3D11DeviceContext* pContext,[In] unsigned int Flags)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::BindSheet</unmanaged-short>	
                                                public void BindSheet(SharpDX.Direct3D11.DeviceContext contextRef, int flags) {
                                                    unsafe {
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), flags,((void**)(*(void**)_nativePointer))[9]);		
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="glyphMetricsRef">No documentation.</param>	
                                                /// <param name="glyphDataRef">No documentation.</param>	
                                                /// <param name="rowPitch">No documentation.</param>	
                                                /// <param name="pixelStride">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::InsertGlyph']/*"/>	
                                                /// <unmanaged>unsigned int IFW1GlyphSheet::InsertGlyph([In] const FW1_GLYPHMETRICS* pGlyphMetrics,[In] const void* pGlyphData,[In] unsigned int RowPitch,[In] unsigned int PixelStride)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::InsertGlyph</unmanaged-short>	
                                                public int InsertGlyph(SharpFontWrapper.GlyphMetrics glyphMetricsRef, System.IntPtr glyphDataRef, int rowPitch, int pixelStride) {
                                                    unsafe {
                                                        int __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &glyphMetricsRef, (void*)glyphDataRef, rowPitch, pixelStride,((void**)(*(void**)_nativePointer))[10]);		
                                                        return __result__;
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::CloseSheet']/*"/>	
                                                /// <unmanaged>void IFW1GlyphSheet::CloseSheet()</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::CloseSheet</unmanaged-short>	
                                                public void CloseSheet() {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer,((void**)(*(void**)_nativePointer))[11]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphSheet::Flush']/*"/>	
                                                /// <unmanaged>void IFW1GlyphSheet::Flush([In] ID3D11DeviceContext* pContext)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphSheet::Flush</unmanaged-short>	
                                                public void Flush(SharpDX.Direct3D11.DeviceContext contextRef) {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer),((void**)(*(void**)_nativePointer))[12]);		
                                                    }
                                                }
                                            }
                                            /// <summary>	
                                            /// No documentation.	
                                            /// </summary>	
                                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphVertexDrawer']/*"/>	
                                            /// <unmanaged>IFW1GlyphVertexDrawer</unmanaged>	
                                            /// <unmanaged-short>IFW1GlyphVertexDrawer</unmanaged-short>	
                                            [Guid("E6CD7A32-5B59-463c-9B1B-D44074FF655B")]
                                            public partial class GlyphVertexDrawer : SharpFontWrapper.FontWrapperObject {
                                                /// <summary>
                                                /// Initializes a new instance of the <see cref="SharpFontWrapper.GlyphVertexDrawer"/> class.
                                                /// </summary>
                                                /// <param name="nativePtr">The native pointer.</param>	
                                                public GlyphVertexDrawer(IntPtr nativePtr) : base(nativePtr) {
                                                }
                                        
                                        		/// <summary>
                                        		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.GlyphVertexDrawer"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
                                        		/// </summary>
                                        		/// <param name="nativePointer">The native pointer.</param>
                                        		/// <returns>
                                        		/// The result of the conversion.
                                        		/// </returns>
                                        		public static explicit operator SharpFontWrapper.GlyphVertexDrawer(IntPtr nativePointer)
                                        		{
                                        			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.GlyphVertexDrawer(nativePointer);
                                        		}
                                                
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphVertexDrawer::GetDevice']/*"/>	
                                                /// <unmanaged>GetDevice</unmanaged>	
                                                /// <unmanaged-short>GetDevice</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1GlyphVertexDrawer::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
                                                public SharpDX.Direct3D11.Device Device {
                                                        get { SharpDX.Direct3D11.Device __output__; GetDevice(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="deviceOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphVertexDrawer::GetDevice']/*"/>	
                                                /// <unmanaged>HRESULT IFW1GlyphVertexDrawer::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphVertexDrawer::GetDevice</unmanaged-short>	
                                                internal void GetDevice(out SharpDX.Direct3D11.Device deviceOut) {
                                                    unsafe {
                                                        IntPtr deviceOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &deviceOut_,((void**)(*(void**)_nativePointer))[4]);		
                                                        deviceOut= (deviceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.Device(deviceOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="contextRef">No documentation.</param>	
                                                /// <param name="glyphAtlasRef">No documentation.</param>	
                                                /// <param name="vertexDataRef">No documentation.</param>	
                                                /// <param name="flags">No documentation.</param>	
                                                /// <param name="preboundSheet">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1GlyphVertexDrawer::DrawVertices']/*"/>	
                                                /// <unmanaged>unsigned int IFW1GlyphVertexDrawer::DrawVertices([In] ID3D11DeviceContext* pContext,[In] IFW1GlyphAtlas* pGlyphAtlas,[In] const FW1_VERTEXDATA* pVertexData,[In] unsigned int Flags,[In] unsigned int PreboundSheet)</unmanaged>	
                                                /// <unmanaged-short>IFW1GlyphVertexDrawer::DrawVertices</unmanaged-short>	
                                                public int DrawVertices(SharpDX.Direct3D11.DeviceContext contextRef, SharpFontWrapper.GlyphAtlas glyphAtlasRef, SharpFontWrapper.VertexData vertexDataRef, int flags, int preboundSheet) {
                                                    unsafe {
                                                        int __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer), (void*)((glyphAtlasRef == null)?IntPtr.Zero:glyphAtlasRef.NativePointer), &vertexDataRef, flags, preboundSheet,((void**)(*(void**)_nativePointer))[5]);		
                                                        return __result__;
                                                    }
                                                }
                                            }
                                            /// <summary>	
                                            /// No documentation.	
                                            /// </summary>	
                                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextGeometry']/*"/>	
                                            /// <unmanaged>IFW1TextGeometry</unmanaged>	
                                            /// <unmanaged-short>IFW1TextGeometry</unmanaged-short>	
                                            [Guid("51E05736-6AFF-44A8-9745-77605C99E8F2")]
                                            public partial class TextGeometry : SharpFontWrapper.FontWrapperObject {
                                                /// <summary>
                                                /// Initializes a new instance of the <see cref="SharpFontWrapper.TextGeometry"/> class.
                                                /// </summary>
                                                /// <param name="nativePtr">The native pointer.</param>	
                                                public TextGeometry(IntPtr nativePtr) : base(nativePtr) {
                                                }
                                        
                                        		/// <summary>
                                        		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.TextGeometry"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
                                        		/// </summary>
                                        		/// <param name="nativePointer">The native pointer.</param>
                                        		/// <returns>
                                        		/// The result of the conversion.
                                        		/// </returns>
                                        		public static explicit operator SharpFontWrapper.TextGeometry(IntPtr nativePointer)
                                        		{
                                        			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.TextGeometry(nativePointer);
                                        		}
                                                
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextGeometry::GetGlyphVerticesTemp']/*"/>	
                                                /// <unmanaged>GetGlyphVerticesTemp</unmanaged>	
                                                /// <unmanaged-short>GetGlyphVerticesTemp</unmanaged-short>	
                                                /// <unmanaged>FW1_VERTEXDATA IFW1TextGeometry::GetGlyphVerticesTemp()</unmanaged>
                                                public SharpFontWrapper.VertexData GlyphVerticesTemp {
                                                        get { return GetGlyphVerticesTemp(); }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextGeometry::Clear']/*"/>	
                                                /// <unmanaged>void IFW1TextGeometry::Clear()</unmanaged>	
                                                /// <unmanaged-short>IFW1TextGeometry::Clear</unmanaged-short>	
                                                public void Clear() {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer,((void**)(*(void**)_nativePointer))[4]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="vertexRef">No documentation.</param>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextGeometry::AddGlyphVertex']/*"/>	
                                                /// <unmanaged>void IFW1TextGeometry::AddGlyphVertex([In] const FW1_GLYPHVERTEX* pVertex)</unmanaged>	
                                                /// <unmanaged-short>IFW1TextGeometry::AddGlyphVertex</unmanaged-short>	
                                                public void AddGlyphVertex(SharpFontWrapper.GlyphVertex vertexRef) {
                                                    unsafe {
                                                        SharpFontWrapper.LocalInterop.Callivoid(_nativePointer, &vertexRef,((void**)(*(void**)_nativePointer))[5]);		
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextGeometry::GetGlyphVerticesTemp']/*"/>	
                                                /// <unmanaged>FW1_VERTEXDATA IFW1TextGeometry::GetGlyphVerticesTemp()</unmanaged>	
                                                /// <unmanaged-short>IFW1TextGeometry::GetGlyphVerticesTemp</unmanaged-short>	
                                                internal SharpFontWrapper.VertexData GetGlyphVerticesTemp() {
                                                    unsafe {
                                                        SharpFontWrapper.VertexData __result__;
                                                        SharpFontWrapper.LocalInterop.CallivoidPtr(_nativePointer,(void*)&__result__,((void**)(*(void**)_nativePointer))[6]);		
                                                        return __result__;
                                                    }
                                                }
                                            }
                                            /// <summary>	
                                            /// No documentation.	
                                            /// </summary>	
                                            /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextRenderer']/*"/>	
                                            /// <unmanaged>IFW1TextRenderer</unmanaged>	
                                            /// <unmanaged-short>IFW1TextRenderer</unmanaged-short>	
                                            [Guid("51E05736-6AFF-44A8-9745-77605C99E8F2")]
                                            public partial class TextRenderer : SharpFontWrapper.FontWrapperObject {
                                                /// <summary>
                                                /// Initializes a new instance of the <see cref="SharpFontWrapper.TextRenderer"/> class.
                                                /// </summary>
                                                /// <param name="nativePtr">The native pointer.</param>	
                                                public TextRenderer(IntPtr nativePtr) : base(nativePtr) {
                                                }
                                        
                                        		/// <summary>
                                        		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpFontWrapper.TextRenderer"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
                                        		/// </summary>
                                        		/// <param name="nativePointer">The native pointer.</param>
                                        		/// <returns>
                                        		/// The result of the conversion.
                                        		/// </returns>
                                        		public static explicit operator SharpFontWrapper.TextRenderer(IntPtr nativePointer)
                                        		{
                                        			return nativePointer == IntPtr.Zero ? null : new SharpFontWrapper.TextRenderer(nativePointer);
                                        		}
                                                
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextRenderer::GetGlyphProvider']/*"/>	
                                                /// <unmanaged>GetGlyphProvider</unmanaged>	
                                                /// <unmanaged-short>GetGlyphProvider</unmanaged-short>	
                                                /// <unmanaged>HRESULT IFW1TextRenderer::GetGlyphProvider([Out] IFW1GlyphProvider** ppGlyphProvider)</unmanaged>
                                                public SharpFontWrapper.GlyphProvider GlyphProvider {
                                                        get { SharpFontWrapper.GlyphProvider __output__; GetGlyphProvider(out __output__); return __output__; }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="glyphProviderOut">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextRenderer::GetGlyphProvider']/*"/>	
                                                /// <unmanaged>HRESULT IFW1TextRenderer::GetGlyphProvider([Out] IFW1GlyphProvider** ppGlyphProvider)</unmanaged>	
                                                /// <unmanaged-short>IFW1TextRenderer::GetGlyphProvider</unmanaged-short>	
                                                internal void GetGlyphProvider(out SharpFontWrapper.GlyphProvider glyphProviderOut) {
                                                    unsafe {
                                                        IntPtr glyphProviderOut_ = IntPtr.Zero;
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, &glyphProviderOut_,((void**)(*(void**)_nativePointer))[4]);		
                                                        glyphProviderOut= (glyphProviderOut_ == IntPtr.Zero)?null:new SharpFontWrapper.GlyphProvider(glyphProviderOut_);	
                                                        __result__.CheckError();
                                                    }
                                                }
                                                
                                                /// <summary>	
                                                /// No documentation.	
                                                /// </summary>	
                                                /// <param name="textLayoutRef">No documentation.</param>	
                                                /// <param name="originX">No documentation.</param>	
                                                /// <param name="originY">No documentation.</param>	
                                                /// <param name="color">No documentation.</param>	
                                                /// <param name="flags">No documentation.</param>	
                                                /// <param name="textGeometryRef">No documentation.</param>	
                                                /// <returns>No documentation.</returns>	
                                                /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IFW1TextRenderer::DrawTextLayout']/*"/>	
                                                /// <unmanaged>HRESULT IFW1TextRenderer::DrawTextLayout([In] IDWriteTextLayout* pTextLayout,[In] float OriginX,[In] float OriginY,[In] unsigned int Color,[In] unsigned int Flags,[In] IFW1TextGeometry* pTextGeometry)</unmanaged>	
                                                /// <unmanaged-short>IFW1TextRenderer::DrawTextLayout</unmanaged-short>	
                                                public void DrawTextLayout(SharpDX.DirectWrite.TextLayout textLayoutRef, float originX, float originY, int color, int flags, SharpFontWrapper.TextGeometry textGeometryRef) {
                                                    unsafe {
                                                        SharpDX.Result __result__;
                                                        __result__= 
                                        				SharpFontWrapper.LocalInterop.Calliint(_nativePointer, (void*)((textLayoutRef == null)?IntPtr.Zero:textLayoutRef.NativePointer), originX, originY, color, flags, (void*)((textGeometryRef == null)?IntPtr.Zero:textGeometryRef.NativePointer),((void**)(*(void**)_nativePointer))[5]);		
                                                        __result__.CheckError();
                                                    }
                                                }
                                            }
                                        }
                                        
                                        #endif
