// Copyright (c) 2017 SharpFontWrapper - Julien Vulliet
//
// Generated by SharpGen
//Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpFontWrapper namespace.
//     This code was generated by a tool.
//     Date : 5/30/2017 12:24:30 AM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using SharpDX;
#if WINDOWS_DESKTOP
namespace SharpFontWrapper {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_DWRITEFONTPARAMS']/*"/>	
    /// <unmanaged>FW1_DWRITEFONTPARAMS</unmanaged>	
    /// <unmanaged-short>FW1_DWRITEFONTPARAMS</unmanaged-short>	
    public  partial struct DirectWriteFontParameters {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_DWRITEFONTPARAMS::pszFontFamily']/*"/>	
        /// <unmanaged>const wchar_t* pszFontFamily</unmanaged>	
        /// <unmanaged-short>wchar_t pszFontFamily</unmanaged-short>	
        public string PszFontFamily;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_DWRITEFONTPARAMS::FontWeight']/*"/>	
        /// <unmanaged>DWRITE_FONT_WEIGHT FontWeight</unmanaged>	
        /// <unmanaged-short>DWRITE_FONT_WEIGHT FontWeight</unmanaged-short>	
        public SharpDX.DirectWrite.FontWeight FontWeight;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_DWRITEFONTPARAMS::FontStyle']/*"/>	
        /// <unmanaged>DWRITE_FONT_STYLE FontStyle</unmanaged>	
        /// <unmanaged-short>DWRITE_FONT_STYLE FontStyle</unmanaged-short>	
        public SharpDX.DirectWrite.FontStyle FontStyle;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_DWRITEFONTPARAMS::FontStretch']/*"/>	
        /// <unmanaged>DWRITE_FONT_STRETCH FontStretch</unmanaged>	
        /// <unmanaged-short>DWRITE_FONT_STRETCH FontStretch</unmanaged-short>	
        public SharpDX.DirectWrite.FontStretch FontStretch;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_DWRITEFONTPARAMS::pszLocale']/*"/>	
        /// <unmanaged>const wchar_t* pszLocale</unmanaged>	
        /// <unmanaged-short>wchar_t pszLocale</unmanaged-short>	
        public string PszLocale;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr PszFontFamily;
            public SharpDX.DirectWrite.FontWeight FontWeight;
            public SharpDX.DirectWrite.FontStyle FontStyle;
            public SharpDX.DirectWrite.FontStretch FontStretch;
            public System.IntPtr PszLocale;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.PszFontFamily != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PszFontFamily);		
                if (this.PszLocale != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PszLocale);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.PszFontFamily = ( @ref.PszFontFamily == IntPtr.Zero )?null:Marshal.PtrToStringUni(@ref.PszFontFamily);
            this.FontWeight = @ref.FontWeight;
            this.FontStyle = @ref.FontStyle;
            this.FontStretch = @ref.FontStretch;
            this.PszLocale = ( @ref.PszLocale == IntPtr.Zero )?null:Marshal.PtrToStringUni(@ref.PszLocale);
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.PszFontFamily = ( this.PszFontFamily == null )?IntPtr.Zero : Utilities.StringToHGlobalUni(this.PszFontFamily);
            @ref.FontWeight = this.FontWeight;
            @ref.FontStyle = this.FontStyle;
            @ref.FontStretch = this.FontStretch;
            @ref.PszLocale = ( this.PszLocale == null )?IntPtr.Zero : Utilities.StringToHGlobalUni(this.PszLocale);
		
		}
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS']/*"/>	
    /// <unmanaged>FW1_FONTWRAPPERCREATEPARAMS</unmanaged>	
    /// <unmanaged-short>FW1_FONTWRAPPERCREATEPARAMS</unmanaged-short>	
    public  partial struct FontWrapperCreationParameters {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::GlyphSheetWidth']/*"/>	
        /// <unmanaged>unsigned int GlyphSheetWidth</unmanaged>	
        /// <unmanaged-short>unsigned int GlyphSheetWidth</unmanaged-short>	
        public int GlyphSheetWidth;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::GlyphSheetHeight']/*"/>	
        /// <unmanaged>unsigned int GlyphSheetHeight</unmanaged>	
        /// <unmanaged-short>unsigned int GlyphSheetHeight</unmanaged-short>	
        public int GlyphSheetHeight;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::MaxGlyphCountPerSheet']/*"/>	
        /// <unmanaged>unsigned int MaxGlyphCountPerSheet</unmanaged>	
        /// <unmanaged-short>unsigned int MaxGlyphCountPerSheet</unmanaged-short>	
        public int MaxGlyphCountPerSheet;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::SheetMipLevels']/*"/>	
        /// <unmanaged>unsigned int SheetMipLevels</unmanaged>	
        /// <unmanaged-short>unsigned int SheetMipLevels</unmanaged-short>	
        public int SheetMipLevels;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::AnisotropicFiltering']/*"/>	
        /// <unmanaged>int AnisotropicFiltering</unmanaged>	
        /// <unmanaged-short>int AnisotropicFiltering</unmanaged-short>	
        public int AnisotropicFiltering;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::MaxGlyphWidth']/*"/>	
        /// <unmanaged>unsigned int MaxGlyphWidth</unmanaged>	
        /// <unmanaged-short>unsigned int MaxGlyphWidth</unmanaged-short>	
        public int MaxGlyphWidth;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::MaxGlyphHeight']/*"/>	
        /// <unmanaged>unsigned int MaxGlyphHeight</unmanaged>	
        /// <unmanaged-short>unsigned int MaxGlyphHeight</unmanaged-short>	
        public int MaxGlyphHeight;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::DisableGeometryShader']/*"/>	
        /// <unmanaged>int DisableGeometryShader</unmanaged>	
        /// <unmanaged-short>int DisableGeometryShader</unmanaged-short>	
        public int DisableGeometryShader;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::VertexBufferSize']/*"/>	
        /// <unmanaged>unsigned int VertexBufferSize</unmanaged>	
        /// <unmanaged-short>unsigned int VertexBufferSize</unmanaged-short>	
        public int VertexBufferSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_FONTWRAPPERCREATEPARAMS::DefaultFontParams']/*"/>	
        /// <unmanaged>FW1_DWRITEFONTPARAMS DefaultFontParams</unmanaged>	
        /// <unmanaged-short>FW1_DWRITEFONTPARAMS DefaultFontParams</unmanaged-short>	
        public SharpFontWrapper.DirectWriteFontParameters DefaultFontParams;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int GlyphSheetWidth;
            public int GlyphSheetHeight;
            public int MaxGlyphCountPerSheet;
            public int SheetMipLevels;
            public int AnisotropicFiltering;
            public int MaxGlyphWidth;
            public int MaxGlyphHeight;
            public int DisableGeometryShader;
            public int VertexBufferSize;
            public SharpFontWrapper.DirectWriteFontParameters.__Native DefaultFontParams;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.DefaultFontParams.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.GlyphSheetWidth = @ref.GlyphSheetWidth;
            this.GlyphSheetHeight = @ref.GlyphSheetHeight;
            this.MaxGlyphCountPerSheet = @ref.MaxGlyphCountPerSheet;
            this.SheetMipLevels = @ref.SheetMipLevels;
            this.AnisotropicFiltering = @ref.AnisotropicFiltering;
            this.MaxGlyphWidth = @ref.MaxGlyphWidth;
            this.MaxGlyphHeight = @ref.MaxGlyphHeight;
            this.DisableGeometryShader = @ref.DisableGeometryShader;
            this.VertexBufferSize = @ref.VertexBufferSize;
            this.DefaultFontParams = new SharpFontWrapper.DirectWriteFontParameters();
			this.DefaultFontParams.__MarshalFrom(ref @ref.DefaultFontParams);
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.GlyphSheetWidth = this.GlyphSheetWidth;
            @ref.GlyphSheetHeight = this.GlyphSheetHeight;
            @ref.MaxGlyphCountPerSheet = this.MaxGlyphCountPerSheet;
            @ref.SheetMipLevels = this.SheetMipLevels;
            @ref.AnisotropicFiltering = this.AnisotropicFiltering;
            @ref.MaxGlyphWidth = this.MaxGlyphWidth;
            @ref.MaxGlyphHeight = this.MaxGlyphHeight;
            @ref.DisableGeometryShader = this.DisableGeometryShader;
            @ref.VertexBufferSize = this.VertexBufferSize;
			@ref.DefaultFontParams = new SharpFontWrapper.DirectWriteFontParameters.__Native();
						
                this.DefaultFontParams.__MarshalTo(ref @ref.DefaultFontParams);
		
		}
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS']/*"/>	
    /// <unmanaged>FW1_GLYPHCOORDS</unmanaged>	
    /// <unmanaged-short>FW1_GLYPHCOORDS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct GlyphCoordinates {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS::TexCoordLeft']/*"/>	
        /// <unmanaged>float TexCoordLeft</unmanaged>	
        /// <unmanaged-short>float TexCoordLeft</unmanaged-short>	
        public float TexCoordLeft;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS::TexCoordTop']/*"/>	
        /// <unmanaged>float TexCoordTop</unmanaged>	
        /// <unmanaged-short>float TexCoordTop</unmanaged-short>	
        public float TexCoordTop;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS::TexCoordRight']/*"/>	
        /// <unmanaged>float TexCoordRight</unmanaged>	
        /// <unmanaged-short>float TexCoordRight</unmanaged-short>	
        public float TexCoordRight;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS::TexCoordBottom']/*"/>	
        /// <unmanaged>float TexCoordBottom</unmanaged>	
        /// <unmanaged-short>float TexCoordBottom</unmanaged-short>	
        public float TexCoordBottom;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS::PositionLeft']/*"/>	
        /// <unmanaged>float PositionLeft</unmanaged>	
        /// <unmanaged-short>float PositionLeft</unmanaged-short>	
        public float PositionLeft;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS::PositionTop']/*"/>	
        /// <unmanaged>float PositionTop</unmanaged>	
        /// <unmanaged-short>float PositionTop</unmanaged-short>	
        public float PositionTop;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS::PositionRight']/*"/>	
        /// <unmanaged>float PositionRight</unmanaged>	
        /// <unmanaged-short>float PositionRight</unmanaged-short>	
        public float PositionRight;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHCOORDS::PositionBottom']/*"/>	
        /// <unmanaged>float PositionBottom</unmanaged>	
        /// <unmanaged-short>float PositionBottom</unmanaged-short>	
        public float PositionBottom;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHIMAGEDATA']/*"/>	
    /// <unmanaged>FW1_GLYPHIMAGEDATA</unmanaged>	
    /// <unmanaged-short>FW1_GLYPHIMAGEDATA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct GlyphImageData {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHIMAGEDATA::Metrics']/*"/>	
        /// <unmanaged>FW1_GLYPHMETRICS Metrics</unmanaged>	
        /// <unmanaged-short>FW1_GLYPHMETRICS Metrics</unmanaged-short>	
        public SharpFontWrapper.GlyphMetrics Metrics;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHIMAGEDATA::pGlyphPixels']/*"/>	
        /// <unmanaged>const void* pGlyphPixels</unmanaged>	
        /// <unmanaged-short>void pGlyphPixels</unmanaged-short>	
        public System.IntPtr PGlyphPixels;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHIMAGEDATA::RowPitch']/*"/>	
        /// <unmanaged>unsigned int RowPitch</unmanaged>	
        /// <unmanaged-short>unsigned int RowPitch</unmanaged-short>	
        public int RowPitch;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHIMAGEDATA::PixelStride']/*"/>	
        /// <unmanaged>unsigned int PixelStride</unmanaged>	
        /// <unmanaged-short>unsigned int PixelStride</unmanaged-short>	
        public int PixelStride;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHMETRICS']/*"/>	
    /// <unmanaged>FW1_GLYPHMETRICS</unmanaged>	
    /// <unmanaged-short>FW1_GLYPHMETRICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct GlyphMetrics {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHMETRICS::OffsetX']/*"/>	
        /// <unmanaged>float OffsetX</unmanaged>	
        /// <unmanaged-short>float OffsetX</unmanaged-short>	
        public float OffsetX;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHMETRICS::OffsetY']/*"/>	
        /// <unmanaged>float OffsetY</unmanaged>	
        /// <unmanaged-short>float OffsetY</unmanaged-short>	
        public float OffsetY;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHMETRICS::Width']/*"/>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHMETRICS::Height']/*"/>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHSHEETDESC']/*"/>	
    /// <unmanaged>FW1_GLYPHSHEETDESC</unmanaged>	
    /// <unmanaged-short>FW1_GLYPHSHEETDESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct GlyphSheetDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHSHEETDESC::GlyphCount']/*"/>	
        /// <unmanaged>unsigned int GlyphCount</unmanaged>	
        /// <unmanaged-short>unsigned int GlyphCount</unmanaged-short>	
        public int GlyphCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHSHEETDESC::Width']/*"/>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHSHEETDESC::Height']/*"/>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHSHEETDESC::MipLevels']/*"/>	
        /// <unmanaged>unsigned int MipLevels</unmanaged>	
        /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        public int MipLevels;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHVERTEX']/*"/>	
    /// <unmanaged>FW1_GLYPHVERTEX</unmanaged>	
    /// <unmanaged-short>FW1_GLYPHVERTEX</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct GlyphVertex {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHVERTEX::PositionX']/*"/>	
        /// <unmanaged>float PositionX</unmanaged>	
        /// <unmanaged-short>float PositionX</unmanaged-short>	
        public float PositionX;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHVERTEX::PositionY']/*"/>	
        /// <unmanaged>float PositionY</unmanaged>	
        /// <unmanaged-short>float PositionY</unmanaged-short>	
        public float PositionY;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHVERTEX::GlyphIndex']/*"/>	
        /// <unmanaged>unsigned int GlyphIndex</unmanaged>	
        /// <unmanaged-short>unsigned int GlyphIndex</unmanaged-short>	
        public int GlyphIndex;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_GLYPHVERTEX::GlyphColor']/*"/>	
        /// <unmanaged>unsigned int GlyphColor</unmanaged>	
        /// <unmanaged-short>unsigned int GlyphColor</unmanaged-short>	
        public int GlyphColor;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_VERTEXDATA']/*"/>	
    /// <unmanaged>FW1_VERTEXDATA</unmanaged>	
    /// <unmanaged-short>FW1_VERTEXDATA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VertexData {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_VERTEXDATA::SheetCount']/*"/>	
        /// <unmanaged>unsigned int SheetCount</unmanaged>	
        /// <unmanaged-short>unsigned int SheetCount</unmanaged-short>	
        public int SheetCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_VERTEXDATA::pVertexCounts']/*"/>	
        /// <unmanaged>const unsigned int* pVertexCounts</unmanaged>	
        /// <unmanaged-short>unsigned int pVertexCounts</unmanaged-short>	
        public System.IntPtr PVertexCounts;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_VERTEXDATA::TotalVertexCount']/*"/>	
        /// <unmanaged>unsigned int TotalVertexCount</unmanaged>	
        /// <unmanaged-short>unsigned int TotalVertexCount</unmanaged-short>	
        public int TotalVertexCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='FW1_VERTEXDATA::pVertices']/*"/>	
        /// <unmanaged>const FW1_GLYPHVERTEX* pVertices</unmanaged>	
        /// <unmanaged-short>FW1_GLYPHVERTEX pVertices</unmanaged-short>	
        public System.IntPtr PVertices;
    }
}
#endif
